{"_type":"export","__export_format":4,"__export_date":"2025-02-20T12:42:39.999Z","__export_source":"insomnia.desktop.app:v10.3.1","resources":[{"_id":"req_d4c6a327621d40e0ae9d253bf71542f7","parentId":"fld_1b3c683d0bc541ca9ddbb96001278750","modified":1740055327237,"created":1739967876612,"url":"https://api.openai.com/v1/assistants","name":"Create Assistants","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"instructions\": \"You are a personal math tutor. Write and run code to answer math questions.\",\n    \"name\": \"Math Tutor\",\n    \"tools\": [{\"type\": \"code_interpreter\"}],\n    \"model\": \"gpt-4o\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_647f363861e240dba717697261c0a04a"},{"name":"User-Agent","value":"insomnia/10.3.1","id":"pair_fbce74a990db459283ec7ada55f53a5a"},{"id":"pair_7d8c9a63c14c4d5d9b9e023e5b23944a","name":"Authorization","value":"{{ _.OpenAI_key }}","description":"","disabled":false},{"id":"pair_3b0e1017029b4a55a19f3a205ada108e","name":"OpenAI-Beta","value":"assistants=v2","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740055312087,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_1b3c683d0bc541ca9ddbb96001278750","parentId":"wrk_f9834d254ea748f0b460afb19dddcf0c","modified":1740055169836,"created":1740055169836,"name":"GPT assistants endpoints","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1740055169836,"environmentType":"kv","_type":"request_group"},{"_id":"wrk_f9834d254ea748f0b460afb19dddcf0c","parentId":null,"modified":1732893842227,"created":1732893842227,"name":"My Collection","description":"","scope":"collection","_type":"workspace"},{"_id":"req_261fc3e315a44a0680ebdf5daa05b613","parentId":"fld_1b3c683d0bc541ca9ddbb96001278750","modified":1740055324437,"created":1739968084434,"url":"https://api.openai.com/v1/threads","name":"Create Thread","description":"","method":"POST","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_d7ee88fccc5645418a5283e8203412ad"},{"name":"User-Agent","value":"insomnia/10.3.1","id":"pair_a56b812cc81a4a47aa296cfca86e096e"},{"id":"pair_d6f41caf3c894b73bb2665b7a4c85d6b","name":"Authorization","value":"{{ _.OpenAI_key }}","description":"","disabled":false},{"id":"pair_9d3231b76af24ddda1566724fb31d014","name":"OpenAI-Beta","value":"assistants=v2","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740055311987,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ef9830f60515462abe4ece67a162f77b","parentId":"fld_1b3c683d0bc541ca9ddbb96001278750","modified":1740055321883,"created":1739968143805,"url":"https://api.openai.com/v1/threads/<thread_id>/messages","name":"Append Thread Message","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"role\": \"user\",\n\t\"content\": \"Can you describe for me what is SEL?\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_9ba5c02984404f48b460ecc8c2176272"},{"name":"User-Agent","value":"insomnia/10.3.1","id":"pair_4641a007d1314d09811038a267572b46"},{"id":"pair_c8c8b25e75414507ae009389012265e7","name":"Authorization","value":"{{ _.OpenAI_key }}","description":"","disabled":false},{"id":"pair_87cf685779bc452bb2fda93fb4394e44","name":"OpenAI-Beta","value":"assistants=v2","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740055311887,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9c15f7e993734aac8c3bba77f22ce82e","parentId":"fld_1b3c683d0bc541ca9ddbb96001278750","modified":1740055318867,"created":1739968366775,"url":"https://api.openai.com/v1/threads/thread_id/runs","name":"Create Runs","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"assistant_id\": \"asst_Jr4REXJO25heMsRF61k5MEKW\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/10.3.1","id":"pair_bf8b00fb696245cc9ecfaa63c4cf66d2"},{"id":"pair_1840b9471cb64447b28e0ab2d6ab2f60","name":"Authorization","value":"{{ _.OpenAI_key }}","description":"","disabled":false},{"id":"pair_b263e2b4c3e747e59727404c9fe3d50b","name":"OpenAI-Beta","value":"assistants=v2","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740055311787,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c4c43ebe087343b697d9d11b3b9c4e82","parentId":"fld_1b3c683d0bc541ca9ddbb96001278750","modified":1740055311749,"created":1739968634996,"url":"https://api.openai.com/v1/threads/<thread_id>/messages","name":"List messages","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.3.1","id":"pair_bf8b00fb696245cc9ecfaa63c4cf66d2"},{"id":"pair_1840b9471cb64447b28e0ab2d6ab2f60","name":"Authorization","value":"{{ _.OpenAI_key }}","description":"","disabled":false},{"id":"pair_b263e2b4c3e747e59727404c9fe3d50b","name":"OpenAI-Beta","value":"assistants=v2","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740055311687,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fb2a5a9ef7e0416387c664d84e1f6387","parentId":"fld_4ad4aa99222045f7a299fda7e8f8bca2","modified":1740054996491,"created":1740054730052,"url":"https://code-actions.weni.ai/admin/code","name":"Send messages code actions","description":"","method":"POST","body":{"mimeType":"text/plain","text":"from openai import OpenAI, OpenAIError\nimport json\n\n\ndef send_message(client: OpenAI, thread_id: str, assistant_id: str, content: str) -> None:\n    \"\"\"\n        Send a message to a specified thread and trigger the assistant to respond.\n\n        Args:\n            :param client: An instance of the OpenAI client.\n            :param thread_id: The ID of the thread where the message will be sent.\n            :param assistant_id: The ID of the assistant that will respond to the message.\n            :param content: The text content of the message to be sent.\n\n        Returns:\n            None\n\n        This function creates a new message in the specified thread with the user's content,\n        then triggers the assistant to process and respond to the message by creating and\n        polling a run on that thread.\n    \"\"\"\n    _ = client.beta.threads.messages.create(\n        thread_id=thread_id,\n        role=\"user\",\n        content=content\n    )\n\n    _ = client.beta.threads.runs.create_and_poll(\n        thread_id=thread_id,\n        assistant_id=assistant_id\n    )\n\n\ndef Run(engine):\n    assistant_id = engine.params.get('assistant_id')\n    openai_api_key = engine.params.get('openai_api_key')\n    content = json.loads(engine.body)['content']\n    thread_id = engine.params.get('thread_id')\n\n    client = OpenAI(api_key=openai_api_key)\n\n    try:\n        engine.log.info(f'Adding message in thread: {thread_id} in assistant: {assistant_id}')\n\n        send_message(client, thread_id=thread_id, assistant_id=assistant_id, content=content)\n\n        engine.result.set(json.dumps({\"status\": \"success\"}), status_code=200, content_type=\"json\")\n\n    except OpenAIError as e:\n        engine.log.error(f'Error adding message in thread: {thread_id} in assistant: {assistant_id}')\n        engine.log.error(e)\n        engine.result.set(json.dumps({\"status\": \"error\", \"error\": str(e)}), status_code=500, content_type=\"json\")\n"},"parameters":[{"id":"pair_02a28c92e8394e74b2e73d4d7ed82bae","name":"name","value":"send_message","description":"","disabled":false},{"id":"pair_2b5e312a79bf41debb31a58961b93afc","name":"language","value":"python","description":"","disabled":false},{"id":"pair_6412eae9aaaa449fb70c14ac20470cfb","name":"type","value":"endpoint","description":"","disabled":false},{"id":"pair_8c6ecadd38af4c3b96ea6f7e1011104d","name":"project_uuid","value":"","description":"","disabled":false}],"headers":[{"name":"Content-Type","value":"text/plain","id":"pair_5c3740a8c6c44f058fe9292389724b81"},{"id":"pair_4b24fa29396a4620b7e19dfe3c4ffaa5","name":"Authorization","value":"Bearer ","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740054730052,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_4ad4aa99222045f7a299fda7e8f8bca2","parentId":"wrk_f9834d254ea748f0b460afb19dddcf0c","modified":1740054517995,"created":1740054517995,"name":"Code actions creations","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1740054517995,"environmentType":"kv","_type":"request_group"},{"_id":"req_041830f5bcf24ae08a691ea54bde7c31","parentId":"fld_4ad4aa99222045f7a299fda7e8f8bca2","modified":1740055122211,"created":1740055063127,"url":"https://code-actions.weni.ai/admin/code","name":"Create new thread code actions","description":"","method":"POST","body":{"mimeType":"text/plain","text":"from openai import OpenAI\nimport requests\nimport json\nfrom datetime import datetime\nimport traceback\n\n\ndef upload_json_to_drive(access_token: str, json_data: json, file_name: str, parent_folder_id: str = None) -> str | None:\n    \"\"\"\n    Uploads JSON data to Google Drive without saving it locally.\n\n    :param access_token: OAuth 2.0 access token.\n    :param json_data: Dictionary containing JSON data to upload.\n    :param file_name: Name of the file to create on Google Drive.\n    :param parent_folder_id: (Optional) ID of the parent folder on Google Drive.\n    :return: ID of the uploaded file if successful, None otherwise.\n    \"\"\"\n    upload_url = 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart'\n    headers = {'Authorization': f'Bearer {access_token}'}\n\n    # File metadata\n    metadata = {\n        'name': file_name,\n        'mimeType': 'application/json'\n    }\n    if parent_folder_id:\n        metadata['parents'] = [parent_folder_id]\n\n    # Convert JSON data to a byte stream\n    json_bytes = json.dumps(json_data).encode('utf-8')\n\n    # Multipart request body\n    files = {\n        'metadata': ('metadata', json.dumps(metadata), 'application/json; charset=UTF-8'),\n        'file': (file_name, json_bytes, 'application/json')\n    }\n\n    response = requests.post(upload_url, headers=headers, files=files)\n    if response.status_code == 200:\n        file_id = response.json().get('id')\n        # print(f'File uploaded successfully. File ID: {file_id}')\n        return file_id\n    else:\n        # print('Error uploading file:', response.text)\n        return None\n\n\ndef get_google_auth(client_secret: str, ref_token: str, client_id: str) -> str:\n    \"\"\"\n    Get Google OAuth 2.0 access token using the refresh token.\n    :param client_secret:\n    :param ref_token:\n    :param client_id:\n    :return access_token:\n    \"\"\"\n    auth_url = 'https://oauth2.googleapis.com/token'\n\n    auth_params = {\n        \"client_secret\": client_secret,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": ref_token,\n        \"client_id\": client_id,\n    }\n\n    auth_headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\",\n    }\n\n    auth_response = requests.post(auth_url, params=auth_params, headers=auth_headers)\n\n    return auth_response.json().get('access_token')\n\n\ndef get_thread_messages(client: OpenAI, thread_id: str) -> str:\n    \"\"\"\n    Get all the messages from a thread.\n\n    :param client:\n    :param thread_id:\n    :return:\n    \"\"\"\n    messages = client.beta.threads.messages.list(\n        thread_id=thread_id\n    )\n\n    return json.dumps([message.to_dict() for message in messages.data], indent=4)\n\ndef create_thread(client: OpenAI) -> str:\n    thread = client.beta.threads.create()\n\n    return thread.id\n\n\ndef Run(engine):\n    openai_api_key = engine.params.get(\"openai_api_key\")\n    drive_api_client_secret = engine.params.get(\"drive_api_client_secret\")\n    drive_api_client_id = engine.params.get(\"drive_api_client_id\")\n    drive_api_refresh_token = engine.params.get(\"drive_api_refresh_token\")\n    parent_folder_id = engine.params.get(\"parent_folder_id\")\n    thread_id = engine.params.get(\"thread_id\")\n\n    try:\n        client = OpenAI(api_key=openai_api_key)\n\n        thread_json = get_thread_messages(client, thread_id=thread_id)\n\n        access_token = get_google_auth(client_secret=drive_api_client_secret, ref_token=drive_api_refresh_token, client_id=drive_api_client_id)\n\n        file_name = f'{datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")}_{thread_id}.json'\n\n        file_id = upload_json_to_drive(access_token, json_data=thread_json, file_name=file_name, parent_folder_id=parent_folder_id)\n\n        engine.result.set(json.dumps({\"file_id\": file_id, \"file_name\": file_name,\n                                      \"thread_id\": thread_id, \"parent_folder_id\": parent_folder_id,\n                                      \"status\": \"success\"}, indent=4), status_code=200, content_type=\"json\")\n        engine.log.info(\"File uploaded successfully.\")\n    except Exception as e:\n        engine.log.error(f\"Error: {e}\")\n        engine.log.error(traceback.format_exc())\n        engine.result.set(json.dumps({\"status\": \"error\", \"error\": str(e)}, indent=4), status_code=500, content_type=\"json\")"},"parameters":[{"id":"pair_02a28c92e8394e74b2e73d4d7ed82bae","name":"name","value":"change_and_export_thread","description":"","disabled":false},{"id":"pair_2b5e312a79bf41debb31a58961b93afc","name":"language","value":"python","description":"","disabled":false},{"id":"pair_6412eae9aaaa449fb70c14ac20470cfb","name":"type","value":"endpoint","description":"","disabled":false},{"id":"pair_8c6ecadd38af4c3b96ea6f7e1011104d","name":"project_uuid","value":"","description":"","disabled":false}],"headers":[{"name":"Content-Type","value":"text/plain","id":"pair_5c3740a8c6c44f058fe9292389724b81"},{"id":"pair_4b24fa29396a4620b7e19dfe3c4ffaa5","name":"Authorization","value":"Bearer ","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740054679678.75,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5cdfbfbe4c06478d8b55623c955b47ad","parentId":"fld_4ad4aa99222045f7a299fda7e8f8bca2","modified":1740055099185,"created":1740055089475,"url":"https://code-actions.weni.ai/admin/code","name":"Thread length code actions","description":"","method":"POST","body":{"mimeType":"text/plain","text":"from openai import OpenAI\nimport traceback\nimport json\n\n\ndef get_thread_length(client: OpenAI, thread_id: str) -> int:\n    \"\"\"\n        Get the number of messages in a specified thread.\n\n        Args:\n            :param client: An instance of the OpenAI client.\n            :param thread_id: The ID of the thread to retrieve messages from.\n\n        Returns:\n            The number of messages in the thread.\n    \"\"\"\n    # List messages in the thread\n    response = client.beta.threads.messages.list(thread_id=thread_id)\n\n    # Get the number of messages\n    return len(response.data)\n\n\ndef Run(engine):\n    thread_id = engine.params.get('thread_id')\n    openai_api_key = engine.params.get('openai_api_key')\n\n    client = OpenAI(api_key=openai_api_key)\n\n    try:\n        thread_length = get_thread_length(client, thread_id=thread_id)\n        engine.result.set(json.dumps({\"thread_length\": thread_length}, indent=4), status_code=200, content_type='json')\n    except Exception as e:\n        engine.log.error(f\"Can't get the length of thread: {e}\")\n        engine.log.error(traceback.format_exc())\n        engine.result.set(json.dumps({\"error\": str(e)}, indent=4), status_code=500, content_type='json')\n"},"parameters":[{"id":"pair_02a28c92e8394e74b2e73d4d7ed82bae","name":"name","value":"get_thread_length","description":"","disabled":false},{"id":"pair_2b5e312a79bf41debb31a58961b93afc","name":"language","value":"python","description":"","disabled":false},{"id":"pair_6412eae9aaaa449fb70c14ac20470cfb","name":"type","value":"endpoint","description":"","disabled":false},{"id":"pair_8c6ecadd38af4c3b96ea6f7e1011104d","name":"project_uuid","value":"","description":"","disabled":false}],"headers":[{"name":"Content-Type","value":"text/plain","id":"pair_5c3740a8c6c44f058fe9292389724b81"},{"id":"pair_4b24fa29396a4620b7e19dfe3c4ffaa5","name":"Authorization","value":"Bearer ","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740054654492.125,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_20c9a5a1368546b095bd63f7b8f77ffc","parentId":"fld_4ad4aa99222045f7a299fda7e8f8bca2","modified":1740055047181,"created":1740055018459,"url":"https://code-actions.weni.ai/admin/code","name":"Create thread code actions","description":"","method":"POST","body":{"mimeType":"text/plain","text":"from openai import OpenAI\nimport json\n\n\ndef create_thread(client: OpenAI) -> str:\n    thread = client.beta.threads.create()\n\n    return thread.id\n\n\ndef Run(engine):\n    openai_api_key = engine.params.get(\"openai_api_key\")\n\n\n    try:\n        client = OpenAI(api_key=openai_api_key)\n\n        thread_id = create_thread(client)\n\n        engine.result.set(json.dumps({\"thread_id\": thread_id, \"status\": \"success\"}, indent=4), status_code=200, content_type=\"json\")\n        engine.log.info(\"File uploaded successfully.\")\n    except Exception as e:\n        engine.log.error(f\"Error: {e}\")\n        engine.result.set(json.dumps({\"status\": \"error\", \"error\": str(e)}, indent=4), status_code=500, content_type=\"json\")"},"parameters":[{"id":"pair_02a28c92e8394e74b2e73d4d7ed82bae","name":"name","value":"create_thread","description":"","disabled":false},{"id":"pair_2b5e312a79bf41debb31a58961b93afc","name":"language","value":"python","description":"","disabled":false},{"id":"pair_6412eae9aaaa449fb70c14ac20470cfb","name":"type","value":"endpoint","description":"","disabled":false},{"id":"pair_8c6ecadd38af4c3b96ea6f7e1011104d","name":"project_uuid","value":"","description":"","disabled":false}],"headers":[{"name":"Content-Type","value":"text/plain","id":"pair_5c3740a8c6c44f058fe9292389724b81"},{"id":"pair_4b24fa29396a4620b7e19dfe3c4ffaa5","name":"Authorization","value":"Bearer ","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740054629305.5,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a4186518fec94a239529f373ea998622","parentId":"fld_4ad4aa99222045f7a299fda7e8f8bca2","modified":1740054935131,"created":1740054528559,"url":"https://code-actions.weni.ai/admin/code","name":"Get messages code actions","description":"","method":"POST","body":{"mimeType":"text/plain","text":"from openai import OpenAI\nimport json\n\n\ndef get_message(client: OpenAI, thread_id: str) -> str:\n    \"\"\"\n        Retrieve and display messages from a specified thread.\n\n        Args:\n            :param client: An instance of the OpenAI client.\n            :param thread_id: The ID of the thread to retrieve messages from.\n\n        Returns:\n            None\n\n        This function retrieves all messages from the specified thread using the OpenAI API,\n        formats them as a JSON string, and prints the result. It also displays the most recent\n        message's text content.\n    \"\"\"\n    messages = client.beta.threads.messages.list(\n        thread_id=thread_id\n    )\n\n    return messages.data[0].content[0].text.value\n\n\ndef Run(engine):\n    openai_api_key = engine.params.get('openai_api_key')\n    thread_id = engine.params.get('thread_id')\n\n    client = OpenAI(api_key=openai_api_key)\n\n    try:\n        message = get_message(client, thread_id=thread_id)\n        engine.result.set(json.dumps({'message': message}, indent=4), status_code=200, content_type='application/json')\n    except Exception as e:\n        engine.log.error(f\"Can't get message: {e}\")\n        engine.result.set(json.dumps({'error': f\"Can't get message: {e}\"}, indent=4), status_code=500, content_type='application/json')\n"},"parameters":[{"id":"pair_52b4132865924125b810e0f6391c3fe8","name":"name","value":"get_message","description":"","disabled":false},{"id":"pair_9db544cb5c1d4e29abcd95cec9be85f9","name":"language","value":"python","description":"","disabled":false},{"id":"pair_efe3e94f648b43a1be65e1f3fa226b95","name":"type","value":"endpoint","description":"","disabled":false},{"id":"pair_d93aa7667f67410aaa2bf53606edff2a","name":"project_uuid","value":"c4f548c7-94d8-49a0-87f3-6b91e9c2de81","description":"","disabled":false}],"headers":[{"name":"Content-Type","value":"text/plain"},{"id":"pair_19d10c20192143d19e593b0989b41753","name":"Authorization","value":"Bearer ","description":"","disabled":false}],"authentication":{},"metaSortKey":-1740054528559,"isPrivate":false,"pathParameters":[],"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_3e8645b03497396d46299a858ae158f5281d0111","parentId":"wrk_f9834d254ea748f0b460afb19dddcf0c","modified":1732893842231,"created":1732893842231,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1732893842231,"environmentType":"kv","_type":"environment"},{"_id":"jar_3e8645b03497396d46299a858ae158f5281d0111","parentId":"wrk_f9834d254ea748f0b460afb19dddcf0c","modified":1737385769197,"created":1732893842232,"name":"Default Jar","cookies":[],"_type":"cookie_jar"}]}